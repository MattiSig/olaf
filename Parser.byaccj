%{
import java.io.*;
import java.util.*;
%}

%token IF, ELSE, ELSEIF, WHILE, VAR, RETURN, GO
%token <sval> NAME, LITERAL, OPNAME
%type <obj> program ,function ,exprs, expr, args, body,
						 binopexpr, smallexpr, elsif, nonemptyArgs

%type <ival> decls, parlist, nonemptyParlist			
%%
start
	:program { generateProgram(name, ((Vector<Object>)($1)).toArray()); }

program
	: function		 				{ $$=new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
	| program function		{ ((Vector<Object>)($1)).add($2); $$ = $1;}
	;

function
 	:{
 		varCount = 0;
		varTable = new HashMap<String,Integer>();
 	}
 	NAME '(' parlist ')' '{' decls  exprs '}' 
 		{$$ = new Object[]{$2, $4, $7, ((Vector<Object>)($8)).toArray()}; }
 	;

parlist
	: 										{ $$ = 0; }
	| nonemptyParlist   	{ $$ =$1; }
	;

nonemptyParlist
	: nonemptyParlist ',' NAME		{ addVar($3); $$ = $1 + 1; }
	| NAME 												{ addVar($1); $$ = 1; }
	;

decls
	:																	{ $$ = 0; }
	| decls VAR nonemptyParlist ';' 	{ $$ = $1 + $3; }
	;

exprs
	: expr ';'					{ $$=new Vector<Object>(); ((Vector<Object>)($$)).add($1);}		
	| exprs expr ';'		{((Vector<Object>)($1)).add($2); $$ = $1;}
	;

expr
	: RETURN expr			{ $$ = new Object[]{"RETURN", $2};}
	|	NAME '=' expr 	{ $$ = new Object[]{"STORE", findVar($1), $3}; }
	|	binopexpr				{ $$ = $1; }
	;

binopexpr
	: binopexpr OPNAME smallexpr		
		{ $$ = new Object[]{"CALL", $2, $1, $3};}
	| smallexpr
		{ $$ = $1; }
	;

smallexpr
	:	NAME 									{ $$ = new Object[]{"FETCH", findVar($1)}; }
	|	NAME '(' args ')'			{ $$ = new Object[]{"FUNCALL", $1, ((Vector<Object>)($3)).toArray()}; }
	|	OPNAME smallexpr			{ $$ = new Object[]{"CALL", $1, $2 }; }
	| LITERAL 							{ $$ = new Object[]{"LITERAL", $1}; }
	|	'(' expr ')'					{ $$ = $2; }
	|	IF expr body elsif 		{ $$ = new Object[]{"IF", $2, $3, $4}; }
	|	WHILE expr body				{ $$ = new Object[]{"WHILE", $2, $3}; }
	;

args
	:									{ $$ = 0; }
	| nonemptyArgs		{ $$ = $1; }
	;

nonemptyArgs
	: nonemptyArgs ',' expr			{((Vector<Object>)($1)).add($3); $$ = $1;}	
	| expr 											{ $$=new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
	;

elsif
	:	{ $$ = new Object[]{"LITERAL", "null"}; }									
	| ELSEIF expr body elsif 		
		{ $$ = new Object[]{"IF", $2, $3, $4}; }
	| ELSE body
		{ $$ = new Object[]{"ELS", $2}; }
	;

body
	: '{' exprs '}'			{ $$ = new Object[]{"BODY", ((Vector<Object>)($2)).toArray()}; }
	;
%%

static private String name;
private Lexer lexer;
private int varCount;
private HashMap<String, Integer> varTable;
private Vector <Object> elsifs = new Vector <Object> ();


private void addVar( String name )
{
	if( varTable.get(name) != null ){
		yyerror("Variable " +name+ " already exists");
	}
	varTable.put(name,varCount++);
}

private int findVar( String name )
{
	Integer res = varTable.get(name);
	if( res == null ){
		yyerror ("Variable " +name+ " does not exist");
	}
	return res;
}

int last_token_read;

private int yylex(){
	int yyl_return = -1;
	try{
		yylval = null;
		last_token_read = yyl_return = lexer.yylex();
		if(yylval==null)
			yylval = new ParserVal(Parser.yyname[yyl_return]);
	}
	catch (IOException e){
		System.err.println("IO error: " + e);
	}
	return yyl_return;
}

public void yyerror( String error ){
	System.out.println("Error:  "+error);
	System.out.println("Token:  "+ Parser.yyname[last_token_read] + " at line " + lexer.getLine());
	System.exit(1);
}

public Parser( Reader r){
	lexer = new Lexer(r, this);
}

public static void main( String args[] ) throws IOException{
	Parser yyparser = new Parser(new FileReader(args[0]));
	name = args[0].substring(0,args[0].indexOf('.'));
	yyparser.yyparse();
}

public static void emit(String line){
	System.out.println(line);
}

private static int uniLab = 0;
public static int newLab(){
	return uniLab++;
}

public static void deepString(Object[] a){
	System.out.println(Arrays.deepToString(a));
}

public static void generateProgram(String pName, Object[] code){
	emit("\""+pName+".mexe\" = main in");
	emit("!{{");
	for( int i = 0 ; i!=code.length ; i++) generateFunction((Object[])code[i]);
	emit("}}*BASIS;");
}

public static void generateFunction(Object[] f){
	//f {fName, parCount, varCount, expr()};
	String fname = (String)f[0];
	int parCount = (Integer)f[1];
	int varCount = (Integer)f[2];

	emit("#\""+fname+"[f"+parCount+"]\" =");
	emit("[");
	emit("(MakeVal null)");
	for(int i = 0; i < varCount; i++){
		emit("(Push)");
	}
	Object[] exprObj = (Object[])f[3];
	for( int i = 0 ; i!=exprObj.length ; i++) generateExpr((Object[])exprObj[i]);
	emit("(Return)");
	emit("];");
}

public static void generateExpr(Object[] e){
	switch((String)e[0]){
		case "RETURN":
			generateExpr((Object[])e[1]);
			emit("(Return)");
			return;
		case "STORE":
			generateExpr((Object[])e[2]);
			emit("(Store "+e[1]+")");
			return;
		case "LITERAL":
			//e = { LITERAL , literal}
			emit("(MakeVal "+(String)e[1]+")");
			return;
		case "IF":
			//e = { IF ,expr, bodi, elseif/els}
			int labElse = newLab();
			int labEnd = newLab();
			generateExpr((Object[])e[1]);
			emit("(GoFalse _"+ labElse +")");
			generateBody((Object[])e[2]);
			emit ("(Go _"+labEnd +")");
			emit("_"+labElse+":");
			generateExpr((Object[])e[3]);
			emit("_"+labEnd+":");
			return;
		case "ELS":
			//e = { ELS, body}
			generateBody((Object[])e[1]);
			return;
		case "CALL":
			int labJump = newLab();
			switch((String)e[1]){
				case "||":
					generateExpr((Object[])e[2]);
					emit("(GoTrue _"+labJump+")");
					generateExpr((Object[])e[3]);
					emit("_"+labJump+":");
					return;
				case "&&":
					generateExpr((Object[])e[2]);
					emit("(GoFalse _"+labJump+")");
					generateExpr((Object[])e[3]);
					emit("_"+labJump+":");
					return;
				case "!":
					generateExpr((Object[])e[2]);
					emit("(Not)");
					return;
				default:
					int i;
					for(i=2; i!=e.length; i++){
						generateExpr((Object[])e[i]);
						if (i < (e.length-1)) emit("(Push)");
					}
					emit("(Call #\""+e[1]+"[f"+(i-2)+"]\" "+(i-2)+")");
					return;
			}
		case "FETCH":
			emit("(Fetch "+e[1]+")");
			return;
		case "WHILE":
			//e = {"WHILE, expr(), body()}
			int labStart = newLab();
			int labFinish = newLab();
			emit("_"+labStart+":");
			generateExpr((Object[])e[1]);
			emit("(GoFalse _"+labFinish+")");
			generateBody((Object[])e[2]);
			emit("(Go _"+labStart+")");
			emit("_"+labFinish+":");
			return;
		case "FUNCALL":
			Object[] args = (Object[])e[2];
			for(int i = 0; i<args.length; i++){
				generateExpr((Object[])args[i]);
				if(i!=args.length-1){
					emit("(Push)");
				}
			}
			emit("(Call #\""+e[1]+"[f"+args.length+"]\" "+args.length+")");
			return;
		default:
			return;
	}
}

public static void generateBody(Object[] bod){
	Object[] e = (Object[])bod[1];
	for(int i = 0; i!=e.length; i++){
		generateExpr((Object[])e[i]);
	}
}